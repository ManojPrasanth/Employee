Explain-postgres

link: http://www.dalibo.org/_media/understanding_explain.pdf
--------------------------------------------------------------
Explain:
 This command displays the execution plan that the PostgreSQL planner generates for the supplied statement.
 The execution plan shows how the table(s) referenced by the statement will be scanned — by plain sequential scan,
 index scan, etc. — and if multiple tables are referenced, what join algorithms will be used to bring together the 
 required rows from each input table.

The most critical part of the display is the estimated statement execution cost, which is the planner's guess at how
long it will take to run the statement (measured in cost units that are arbitrary, but conventionally mean disk page fetches). 
Actually two numbers are shown: the start-up cost before the first row can be returned, and the total cost to return all the rows.
For most queries the total cost is what matters, but in contexts such as a subquery in EXISTS, the planner will choose the
smallest start-up cost instead of the smallest total cost (since the executor will stop after getting one row, anyway). Also,
if you limit the number of rows to return with a LIMIT clause, the planner makes an appropriate interpolation between the 
endpoint costs to estimate which plan is really the cheapest.

The ANALYZE option causes the statement to be actually executed, not only planned. Then actual runtime statistics are added to 
the display, including the total elapsed time expended within each plan node (in milliseconds) and the total number of rows it
actually returned. This is useful for seeing whether the planner's estimates are close to reality.

Important: Keep in mind that the statement is actually executed when the ANALYZE option is used. 
Although EXPLAIN will discard any output that a SELECT would return, other side effects of the statement will happen as usual.
If you wish to use EXPLAIN ANALYZE on an INSERT, UPDATE, DELETE, CREATE TABLE AS, or EXECUTE statement without letting the command
affect your data, use this approach:

BEGIN;
EXPLAIN ANALYZE ...;
ROLLBACK;
------------------------------------------------------------------------------------------------------
create table foo (c1 integer, c2 text);

insert into foo select i, md5(random()::text) from generate_series(1, 1000000) as i;
-------------------------------------------

explain select * from foo;
­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­
 Seq Scan on foo  (cost=0.00..18584.82
                   rows=1025082 width=36)
• Cost
• cost to get the first row: 0.00
• cost to get all rows: 18584.82
• in “page cost” unit
• Rows
• number of rows
• Width
• average width of a row
• in bytes
------------------------------------------
analyze foo;

it is used to analyze the table and results the correct no. of rows.

What does ANALYZE do?

• It reads some random rows of the table
• 300*default_statistics_target
• It computes some statistics of the values in each column of the table
• Number of most common values, and histogram
• depends on default_statistics_target
• may be customized for each column
• And it stores the column statistics in the pg_statistic catalog
• Try the pg_stats view
• easier to read
• and lots of quite interesting informations
-----------------------------------------------
select sum(avg_width) as width from pg_stats where tablename='foo';
 width 
-------
    37
(1 row)

• Average size (in bytes) of a row in the resulting data set
• The lesser, the better
-------------------------------------------------
select reltuples from pg_class where relname='foo';
 reltuples 
-----------
     1e+06
(1 row)

• All relations metadata appear in the pg_class catalog
• Many interesting informations
• reltuples
• relpages
• relallvisible

The number of rows is easier to get. The pg_class system catalog is a catalog of all relations
(tables, indexes, sequences, etc) in the database. This catalog holds metadatas about the
relations. It also holds some statistical informations, such as the 
• estimated number of rows(column reltuples), 
• the estimated number of file pages (relpages), and 
• the number of pages containing only visibles rows for all the current transactions (relallvisible).
----------------------------------------------------------
select relpages*current_setting('seq_page_cost')::float4 + reltuples*current_setting('cpu_tuple_cost')::float4 as total_cost from pg_class where relname='foo';
 total_cost 
------------
      18334
(1 row)

select reltuples*current_setting('cpu_tuple_cost')::float4 as total_cost from pg_class where relname='foo';			//current_setting('cpu_tuple_cost')::float4=0.01
 total_cost 
------------
      10000					//(total rows/100)
(1 row)

select relpages*current_setting('seq_page_cost')::float4 as total_cost from pg_class where relname='foo';			//current_setting('seq_page_cost')::float4 as total_cost=1
 total_cost 
------------
       8334					//(estimated number of file pages (relpages))
(1 row)

---------------------------------------------------------------
explain (analyze) select * from foo;

 Seq Scan on foo  (cost=0.00..18334.00 rows=1000000 width=37) (actual time=0.020..81.148 rows=1000000 loops=1)
 Planning time: 0.060 ms
 Execution time: 116.536 ms
(3 rows)

• 3 new informations
• real execution time in milliseconds
• real number of lines
• and number of loops
• Be careful, it really executes the query!
------------------------------------------------------------------------
ANALYZE
Carry out the command and show actual run times and other statistics. This parameter defaults to FALSE.

VERBOSE
Display additional information regarding the plan. Specifically, include the output column list for each node
in the plan tree, schema-qualify table and function names, always label variables in expressions with their range table
alias, and always print the name of each trigger for which statistics are displayed. This parameter defaults to FALSE.
-------------------------------------------------------------------------
EXPLAIN verbose SELECT * FROM foo;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Seq Scan on public.foo  (cost=0.00..18334.00 rows=1000000 width=37)
   Output: c1, c2
(2 rows)
---------------------------------------------------------
Be careful when using the ANALYZE option with any DML command. An EXPLAIN ANALYZE
UPDATE… will really update some rows. Same thing with DELETE, or INSERT. Be sure to enclose
them in an explicit transaction, so that you can ROLLBACk the changes.
----------------------------------------------------
Buffers:
explain (analyze,buffers) select * from foo;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Seq Scan on foo  (cost=0.00..18334.00 rows=1000000 width=37) (actual time=0.077..94.774 rows=1000000 loops=1)
   Buffers: shared hit=64 read=8270
 Planning time: 0.056 ms
 Execution time: 141.230 ms
(4 rows)

BUFFERS is a 9.0 feature
• New informations:
• blocks read, and written
• in the PostgreSQL cache (hit)
• and outside (read)

